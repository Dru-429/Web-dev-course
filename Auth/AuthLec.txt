

Lesson 1 : Authentication vs Authorization (with Real-life Analogy)

Authentication : Prove Who you are

1. It means to prove who are we like showing id card at the enterance gate. 

2. In code form client side we send 
        {
            "email": "adbc",
            "password": "1234",
        }
    and then we check the credential using middelware and if correct backend response with :
        {
           "accessToken": "xyz.abc.123",
            "user": {
                "name": "Dru",
                "role": "admin" 
            },
        }

Authorization : What yor are allowed to do

1. Here we check the role of the user and what he is allowed to do so 
2. in code      
    if (user.role === 'admin') {
  // allow deleting a user
}


Lesson 2 : Session vs Token-Based Authentication

SESSION BASED Authentication
1. It stored in the DB and a session ID is generated and that is what forwaded to client side stored in the cookies. 

2. Steps :
User login --> Server created a recode --> generates a session recode { sessionId: "abc123", userId: "dru" } --> then send a cookies to client side --> Set-Cookie: sessionId=abc123; HttpOnly --> On server side every time any req is made server find the user using the session id --> cuzz of that it create a pipeline b/w all the user working simuntanuosly 

3. Pros: Server Controlled, Safer, Battle-tested 

4. Cons: DB is must, harder to scale in microservices

COOKIES :: 
A cookie is a small piece of data that the server asks the browser to store, and the browser automatically sends it back with every future request to that server — unless restricted by flags.
Cookies are used to maintain state in HTTP (which is otherwise stateless).

Http only : it prevent js  from reading or modifying the cookies. , so console.log(document.cookie); // ❌ Will NOT show HttpOnly cookies 
so it prevent xss atack 

JWT( json Web Token )
1. Token based Authentication 
2. So no server db storage needed 
3.  User login --> Sever sends 
    {
    "accessToken": "eyJhbGci... (contains user ID, role)"
    } 
    --> Client side stores token in memory or cookie --> AN devery request includes Authorization bearer userid --> Server decodes the token, verifies the signature, and extracts the user info
4. Like Session Id we also send JWT Tokens with every req to the server to retrive user data 

🤔 But Won’t This Be Slow?
    Nope — JWTs are just Base64-encoded strings:
    No DB lookup is needed (unless you're blacklisting tokens or checking refresh tokens)
    Decoding and verifying the token is fast (microseconds).